name: Deploy to Azure
on: [repository_dispatch]

jobs:
  deploy-to-azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZ_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZ_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZ_TENANT_ID }}
      TF_VAR_github_pat: ${{ secrets.GITHUB_TOKEN }}
      TF_VAR_gpr_url: ${{github.event.client_payload.gprUrl}}
      TF_VAR_github_user: ${{ github.actor }}
    
    if:  startsWith(github.event.action, 'deploy-to-azure')
    steps:
    - name: 'Checkout'
      if: (false)
      uses: actions/checkout@master
    - name: 'Terraform Format'
      if: (false)
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'fmt'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Terraform Init'
      if: (false)
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'init'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Terraform Validate'
      if: (false)
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'validate'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: 'Terraform Plan'
      if: (false)
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'plan'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Terraform Apply'
      if: (false)
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'apply'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    - name: Update issue success
      if: (success())
      env:
        issue_number: '${{github.event.client_payload.issue}}'
        cloud: '${{github.event.client_payload.cloud}}'
        gprUrl: '${{github.event.client_payload.gprUrl}}'
        customer: '${{github.event.client_payload.customer}}'
      uses: actions/github-script@0.5.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { issue_number, cloud, gprUrl, customer } = process.env;
          github.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Deployed successfully to ' + cloud + ' for ' +  customer + ': ' + 'https://octocatgenerator.z6.web.core.windows.net/'
          })
          github.issues.addLabels({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['deployed']
          })
    - name: Update issue failure
      if: (failure())
      env:
        issue_number: '${{github.event.client_payload.issue}}'
        cloud: '${{github.event.client_payload.cloud}}'
        gprUrl: '${{github.event.client_payload.gprUrl}}'
        customer: '${{github.event.client_payload.customer}}'
      uses: actions/github-script@0.5.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { issue_number, cloud, gprUrl, customer } = process.env;
          github.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Deployment to ' + cloud + ' failed for ' +  customer + ' :cry:'
          })
    - name: Trigger issue template update
      if: (success())
      env:
        cloud: '${{github.event.client_payload.cloud}}'
        customer: '${{github.event.client_payload.customer}}'
      uses: actions/github-script@0.5.0
      with:
        github-token: ${{secrets.GPR_PAT}}
        script: |
          const { customer, cloud } = process.env;
          github.repos.createDispatchEvent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            event_type: 'update-latest-env',
            client_payload: { customer: customer, cloud: cloud, url: 'https://octocatgenerator.z6.web.core.windows.net/' }
          })
